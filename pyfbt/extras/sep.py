from mpmath import *

def eq_separatrix(aa, slr, ecc):
    """
    The following is from O'Shaughnessy PRD 67, 044004 (2003) Eq. B.7.
    This is used to calculate the p value for a given eccentricity to find
    the separatrix.
    """
    sep = (aa**4 * (-3 + ecc)**2 * (1 + ecc)**2 + slr**2 *
           (-6 - 2 * ecc + slr)**2 - 2 * aa**2 * (1 + ecc) * slr *
           (14 + 2 * ecc**2 + (3 - ecc) * slr))
    return sep


def find_slr(aa, ecc):
    """
    Analytical solution (the one that we want out of four)
    to the separatrix equation.
    """
    # TODO (aaron): make sure that this works for retrograde orbits
    slr = (3 + ecc + sqrt(4*(3 + ecc)**2 - 
        (4*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2))/3. + 
        (16*2**0.3333333333333333*
           (81 - 90*aa**2 + 9*aa**4 + 108*ecc - 120*aa**2*ecc + 12*aa**4*ecc + 
             54*ecc**2 - 36*aa**2*ecc**2 - 2*aa**4*ecc**2 + 12*ecc**3 - 
             8*aa**2*ecc**3 - 4*aa**4*ecc**3 + ecc**4 - 2*aa**2*ecc**4 + aa**4*ecc**4)
           )/(3.*(16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)**
                3 - 288*(3 + ecc)*
               (18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
               (7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
              432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
              432*(3 + ecc)**2*(9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 
                 4*aa**4*ecc**3 + aa**4*ecc**4) - 
              144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
               (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                 aa**4*ecc**4) + 
              sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
                3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 3057647616*aa**10*ecc + 
                4076863488*aa**6*ecc**2 - 8153726976*aa**8*ecc**2 + 
                4076863488*aa**10*ecc**2 + 792723456*aa**6*ecc**3 - 
                2038431744*aa**8*ecc**3 + 1245708288*aa**10*ecc**3 - 
                3227516928*aa**6*ecc**4 + 4643094528*aa**8*ecc**4 - 
                1415577600*aa**10*ecc**4 - 3510632448*aa**6*ecc**5 + 
                4303355904*aa**8*ecc**5 - 792723456*aa**10*ecc**5 - 
                1585446912*aa**6*ecc**6 + 1358954496*aa**8*ecc**6 + 
                226492416*aa**10*ecc**6 - 339738624*aa**6*ecc**7 + 
                226492416*aa**8*ecc**7 + 113246208*aa**10*ecc**7 - 
                28311552*aa**6*ecc**8 + 56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8
                ))**0.3333333333333333) + 
        (16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)**3 - 
            288*(3 + ecc)*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
               aa**2*ecc**2)*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
            432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
            432*(3 + ecc)**2*(9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 
               4*aa**4*ecc**3 + aa**4*ecc**4) - 
            144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
             (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + aa**4*ecc**4)
              + sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
              3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 3057647616*aa**10*ecc + 
              4076863488*aa**6*ecc**2 - 8153726976*aa**8*ecc**2 + 
              4076863488*aa**10*ecc**2 + 792723456*aa**6*ecc**3 - 
              2038431744*aa**8*ecc**3 + 1245708288*aa**10*ecc**3 - 
              3227516928*aa**6*ecc**4 + 4643094528*aa**8*ecc**4 - 
              1415577600*aa**10*ecc**4 - 3510632448*aa**6*ecc**5 + 
              4303355904*aa**8*ecc**5 - 792723456*aa**10*ecc**5 - 
              1585446912*aa**6*ecc**6 + 1358954496*aa**8*ecc**6 + 
              226492416*aa**10*ecc**6 - 339738624*aa**6*ecc**7 + 
              226492416*aa**8*ecc**7 + 113246208*aa**10*ecc**7 - 
              28311552*aa**6*ecc**8 + 56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8))
           **0.3333333333333333/(3.*2**0.3333333333333333))/2. - 
     sqrt(8*(3 + ecc)**2 - (8*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
             aa**2*ecc**2))/3. - 
        (16*2**0.3333333333333333*
           (81 - 90*aa**2 + 9*aa**4 + 108*ecc - 120*aa**2*ecc + 12*aa**4*ecc + 
             54*ecc**2 - 36*aa**2*ecc**2 - 2*aa**4*ecc**2 + 12*ecc**3 - 
             8*aa**2*ecc**3 - 4*aa**4*ecc**3 + ecc**4 - 2*aa**2*ecc**4 + aa**4*ecc**4)
           )/(3.*(16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)**
                3 - 288*(3 + ecc)*
               (18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
               (7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
              432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
              432*(3 + ecc)**2*(9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 
                 4*aa**4*ecc**3 + aa**4*ecc**4) - 
              144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
               (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                 aa**4*ecc**4) + 
              sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
                3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 3057647616*aa**10*ecc + 
                4076863488*aa**6*ecc**2 - 8153726976*aa**8*ecc**2 + 
                4076863488*aa**10*ecc**2 + 792723456*aa**6*ecc**3 - 
                2038431744*aa**8*ecc**3 + 1245708288*aa**10*ecc**3 - 
                3227516928*aa**6*ecc**4 + 4643094528*aa**8*ecc**4 - 
                1415577600*aa**10*ecc**4 - 3510632448*aa**6*ecc**5 + 
                4303355904*aa**8*ecc**5 - 792723456*aa**10*ecc**5 - 
                1585446912*aa**6*ecc**6 + 1358954496*aa**8*ecc**6 + 
                226492416*aa**10*ecc**6 - 339738624*aa**6*ecc**7 + 
                226492416*aa**8*ecc**7 + 113246208*aa**10*ecc**7 - 
                28311552*aa**6*ecc**8 + 56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8
                ))**0.3333333333333333) - 
        (16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)**3 - 
            288*(3 + ecc)*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
               aa**2*ecc**2)*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
            432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
            432*(3 + ecc)**2*(9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 
               4*aa**4*ecc**3 + aa**4*ecc**4) - 
            144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
             (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + aa**4*ecc**4)
              + sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
              3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 3057647616*aa**10*ecc + 
              4076863488*aa**6*ecc**2 - 8153726976*aa**8*ecc**2 + 
              4076863488*aa**10*ecc**2 + 792723456*aa**6*ecc**3 - 
              2038431744*aa**8*ecc**3 + 1245708288*aa**10*ecc**3 - 
              3227516928*aa**6*ecc**4 + 4643094528*aa**8*ecc**4 - 
              1415577600*aa**10*ecc**4 - 3510632448*aa**6*ecc**5 + 
              4303355904*aa**8*ecc**5 - 792723456*aa**10*ecc**5 - 
              1585446912*aa**6*ecc**6 + 1358954496*aa**8*ecc**6 + 
              226492416*aa**10*ecc**6 - 339738624*aa**6*ecc**7 + 
              226492416*aa**8*ecc**7 + 113246208*aa**10*ecc**7 - 
              28311552*aa**6*ecc**8 + 56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8))
           **0.3333333333333333/(3.*2**0.3333333333333333) + 
        (64*(3 + ecc)**3 - 32*(3 + ecc)*
            (18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2) + 
           32*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3))/
         (4.*sqrt(4*(3 + ecc)**2 - 
             (4*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2))/3. + 
             (16*2**0.3333333333333333*
                (81 - 90*aa**2 + 9*aa**4 + 108*ecc - 120*aa**2*ecc + 12*aa**4*ecc + 
                  54*ecc**2 - 36*aa**2*ecc**2 - 2*aa**4*ecc**2 + 12*ecc**3 - 
                  8*aa**2*ecc**3 - 4*aa**4*ecc**3 + ecc**4 - 2*aa**2*ecc**4 + 
                  aa**4*ecc**4))/
              (3.*(16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
                       aa**2*ecc**2)**3 - 
                   288*(3 + ecc)*
                    (18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
                    (7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
                   432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
                   432*(3 + ecc)**2*
                    (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                      aa**4*ecc**4) - 
                   144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
                      aa**2*ecc**2)*
                    (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                      aa**4*ecc**4) + 
                   sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
                     3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 
                     3057647616*aa**10*ecc + 4076863488*aa**6*ecc**2 - 
                     8153726976*aa**8*ecc**2 + 4076863488*aa**10*ecc**2 + 
                     792723456*aa**6*ecc**3 - 2038431744*aa**8*ecc**3 + 
                     1245708288*aa**10*ecc**3 - 3227516928*aa**6*ecc**4 + 
                     4643094528*aa**8*ecc**4 - 1415577600*aa**10*ecc**4 - 
                     3510632448*aa**6*ecc**5 + 4303355904*aa**8*ecc**5 - 
                     792723456*aa**10*ecc**5 - 1585446912*aa**6*ecc**6 + 
                     1358954496*aa**8*ecc**6 + 226492416*aa**10*ecc**6 - 
                     339738624*aa**6*ecc**7 + 226492416*aa**8*ecc**7 + 
                     113246208*aa**10*ecc**7 - 28311552*aa**6*ecc**8 + 
                     56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8))**
                 0.3333333333333333) + 
             (16*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)**3 - 
                 288*(3 + ecc)*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + 
                    aa**2*ecc**2)*
                  (7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3) + 
                 432*(7*aa**2 + 7*aa**2*ecc + aa**2*ecc**2 + aa**2*ecc**3)**2 + 
                 432*(3 + ecc)**2*
                  (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                    aa**4*ecc**4) - 
                 144*(18 - 3*aa**2 + 12*ecc - 2*aa**2*ecc + 2*ecc**2 + aa**2*ecc**2)*
                  (9*aa**4 + 12*aa**4*ecc - 2*aa**4*ecc**2 - 4*aa**4*ecc**3 + 
                    aa**4*ecc**4) + 
                 sqrt(764411904*aa**6 - 1528823808*aa**8 + 764411904*aa**10 + 
                   3057647616*aa**6*ecc - 6115295232*aa**8*ecc + 
                   3057647616*aa**10*ecc + 4076863488*aa**6*ecc**2 - 
                   8153726976*aa**8*ecc**2 + 4076863488*aa**10*ecc**2 + 
                   792723456*aa**6*ecc**3 - 2038431744*aa**8*ecc**3 + 
                   1245708288*aa**10*ecc**3 - 3227516928*aa**6*ecc**4 + 
                   4643094528*aa**8*ecc**4 - 1415577600*aa**10*ecc**4 - 
                   3510632448*aa**6*ecc**5 + 4303355904*aa**8*ecc**5 - 
                   792723456*aa**10*ecc**5 - 1585446912*aa**6*ecc**6 + 
                   1358954496*aa**8*ecc**6 + 226492416*aa**10*ecc**6 - 
                   339738624*aa**6*ecc**7 + 226492416*aa**8*ecc**7 + 
                   113246208*aa**10*ecc**7 - 28311552*aa**6*ecc**8 + 
                   56623104*aa**8*ecc**8 - 28311552*aa**10*ecc**8))**
               0.3333333333333333/(3.*2**0.3333333333333333))))/2.)
    return float(re(slr))







